{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part13/using_relational_databases_with_sequelize","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>This section introduces node applications using relational databases. In this section, a relational database node-backend is built for the note-taking application familiar from sections 3-5. To complete this part, you will need a reasonable knowledge of relational databases and SQL. One place to acquire sufficient knowledge is the course <a href=\"https://tikape.mooc.fi/\">Fundamentals of Databases</a>.</p>\n<h3>Advantages and disadvantages of document databases</h3>\n<p>We have used the MongoDB database in all the previous parts of the course. Mongo is a <a href=\"https://en.wikipedia.org/wiki/Document-oriented_database\">document database</a> and one of its most characteristic features is its <i>skepticity</i>, i.e. the database has only a very limited awareness of what kind of data is stored in its collections. The schema of the database exists only in the program code, which interprets the data in a particular way, e.g. by recognizing that some fields are references to objects in another collection.</p>\n<p>In the example application of parts 3 and 4, the database stores notes and users. </p>\n<p>The collection <i>notes</i> that stores notes looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"600c0e410d10256466898a6c\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML is easy\"</span>\n    <span class=\"token string\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span>T11<span class=\"token operator\">:</span><span class=\"token number\">53</span><span class=\"token operator\">:</span><span class=\"token number\">37.292</span><span class=\"token operator\">+</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token string\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"600c0edde86c7264ace9bb78\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS is hard\"</span>\n    <span class=\"token string\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span>T11<span class=\"token operator\">:</span><span class=\"token number\">56</span><span class=\"token operator\">:</span><span class=\"token number\">13.912</span><span class=\"token operator\">+</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token string\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Users saving collection <i>users</i> looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"600c0e410d10256466883a6a\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mluukkai\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"passwordHash\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"$2b$10$Df1yYJRiQuu3Sr4tUrk.SerVz1JKtBHlBOARfY0PBn/Uo7qr8Ocou\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    notes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"600c0edde86c7264ace9bb78\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"600c0e410d10256466898a6c\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nMongoDB does know the types of the fields of the stored entities, but it has no information about which collection of entities the user record ids refer to. MongoDB also does not care what fields the entities stored in the collections have. MongoDB therefore leaves it entirely up to the programmer to ensure that the correct information is stored in the database.\n\nThere are both advantages and disadvantages to not having a schema. One advantage is the flexibility that schema agnosticism brings: since the schema does not need to be defined at the database level, application development can be faster and easier in some cases, with little effort required to define and modify the schema in any case. The problems with schema-lessness are related to the error-proneness, everything is left to the programmer, the database has no way of checking whether the data stored in it is &lt;i>honest&lt;/i>, i.e. whether all mandatory fields have values, whether fields of reference type refer to existing entities of the right type in general, etc.\n\nThe relational databases that are the focus of this section, on the other hand, rely heavily on the existence of a schema, and the advantages and disadvantages of schema databases are almost the opposite of those of non-schema databases.\n\nThe reason why the earlier parts of the course used MongoDB is precisely because of its schema-less nature, which has made the database somewhat easier to use for someone with little knowledge of relational databases. For most of the use cases in this course I would have chosen a relational database myself.\n\n### Application database\n\nWe need a relational database for our application. There are many options, we will use the currently most popular Open Source solution [PostgreSQL](https://www.postgresql.org/). If you wish, you can install Postgres (as the database is often called) on your machine. An easier way is to use one of the cloud-based Postgres, e.g. [ElephantSQL](https://www.elephantsql.com/). You can also use the lessons learned in the course [part 12](/en/part12) to run Postgres locally using Docker.\n\nHowever, we will now take advantage of the fact that it is possible to create a Postgres database for your application on the Heroku cloud platform, familiar from parts 3 and 4. \n\nIn the theoretical material in this section, we build a Postgres-enabled version of the backend of the notes-storage application built in sections 3 and 4.\n\nNow let's create a Heroku application inside the appropriate directory, add a database to it, and use the _heroku config_ command to see what the &lt;i>connect string:&lt;/i> required to connect to the database is.\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>bash\nheroku create\nheroku addons<span class=\"token operator\">:</span>create heroku<span class=\"token operator\">-</span>postgresql<span class=\"token operator\">:</span>hobby<span class=\"token operator\">-</span>dev\nheroku config\n<span class=\"token operator\">===</span> cryptic<span class=\"token operator\">-</span>everglades<span class=\"token operator\">-</span><span class=\"token number\">76708</span> Config Vars\n<span class=\"token constant\">DATABASE_URL</span><span class=\"token operator\">:</span> postgres<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>password<span class=\"token operator\">></span>@ec2<span class=\"token operator\">-</span><span class=\"token number\">44</span><span class=\"token operator\">-</span><span class=\"token number\">199</span><span class=\"token operator\">-</span><span class=\"token number\">83</span><span class=\"token operator\">-</span><span class=\"token number\">229.</span>compute<span class=\"token operator\">-</span><span class=\"token number\">1.</span>amazonaws<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span><span class=\"token number\">5432</span><span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>db<span class=\"token operator\">-</span>name<span class=\"token operator\">></span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nEspecially when using a relational database, it is essential to access the database directly as well. There are many ways to do this, including several different graphical user interfaces, such as [pgAdmin](https://www.pgadmin.org/). However, the [pqsl](https://www.postgresql.org/docs/current/app-psql.html) command-line tool in Postgres will be used.\n\nTo access the database, run _psql_ on the Heroku server as follows (note that the command parameters depend on the connect url of the Heroku application):\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>bash\nheroku run psql <span class=\"token operator\">-</span>h ec2<span class=\"token operator\">-</span><span class=\"token number\">44</span><span class=\"token operator\">-</span><span class=\"token number\">199</span><span class=\"token operator\">-</span><span class=\"token number\">83</span><span class=\"token operator\">-</span><span class=\"token number\">229.</span>compute<span class=\"token operator\">-</span><span class=\"token number\">1.</span>amazonaws<span class=\"token punctuation\">.</span>com <span class=\"token operator\">-</span>p <span class=\"token number\">5432</span> <span class=\"token operator\">-</span><span class=\"token constant\">U</span> <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>dbname<span class=\"token operator\">></span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nAfter entering the password, try the main pslq command _\\d_, which tells you the contents of the database:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>bash\nPassword <span class=\"token keyword\">for</span> user <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span><span class=\"token operator\">:</span>\n<span class=\"token function\">psql</span> <span class=\"token punctuation\">(</span><span class=\"token number\">13.4</span> <span class=\"token punctuation\">(</span>Ubuntu <span class=\"token number\">13.4</span><span class=\"token operator\">-</span><span class=\"token number\">1.</span>pgdg20<span class=\"token punctuation\">.</span><span class=\"token number\">04</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">SSL</span> <span class=\"token function\">connection</span> <span class=\"token punctuation\">(</span>protocol<span class=\"token operator\">:</span> TLSv1<span class=\"token punctuation\">.</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> cipher<span class=\"token operator\">:</span> <span class=\"token constant\">TLS_AES_256_GCM_SHA384</span><span class=\"token punctuation\">,</span> bits<span class=\"token operator\">:</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> compression<span class=\"token operator\">:</span> off<span class=\"token punctuation\">)</span>\nType <span class=\"token string\">\"help\"</span> <span class=\"token keyword\">for</span> help<span class=\"token punctuation\">.</span>\n\n<span class=\"token parameter\">username</span><span class=\"token operator\">=></span> \\d\nDid not find any relations<span class=\"token punctuation\">.</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nAs you might guess, there is nothing in the database. \n\nLet's create a table for notes:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>sql\n<span class=\"token constant\">CREATE</span> <span class=\"token constant\">TABLE</span> <span class=\"token function\">notes</span> <span class=\"token punctuation\">(</span>\n    id <span class=\"token constant\">SERIAL</span> <span class=\"token constant\">PRIMARY</span> <span class=\"token constant\">KEY</span><span class=\"token punctuation\">,</span>\n    content text <span class=\"token constant\">NOT</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\n    important boolean<span class=\"token punctuation\">,</span>\n    date time\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nA few notes: the &lt;i>id &lt;/i> column is defined as a &lt;i>primary key&lt;/i>, i.e. the value of the column must be unique for each row in the table and the value must not be empty. The type of the column is defined as [SERIAL](https://www.postgresql.org/docs/9.1/datatype-numeric.html#DATATYPE-SERIAL), which is not the actual type but an abbreviation for the fact that it is an integer column to which Postgres automatically assigns a unique, incrementing value when creating rows. The textual column &lt;i>content&lt;/i> is defined in such a way that it must be assigned a value.\n\nLet's look at the situation from the console. First, the _\\d_ command, which tells us what tables are in the deck:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>sql\n<span class=\"token parameter\">username</span><span class=\"token operator\">=></span> \\d\n                 List <span class=\"token keyword\">of</span> relations\n Schema <span class=\"token operator\">|</span> Name <span class=\"token operator\">|</span> Type <span class=\"token operator\">|</span> Owner\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n <span class=\"token keyword\">public</span> <span class=\"token operator\">|</span> notes <span class=\"token operator\">|</span> table <span class=\"token operator\">|</span> username\n <span class=\"token keyword\">public</span> <span class=\"token operator\">|</span> notes_id_seq <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span> <span class=\"token function\">username</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> rows<span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nIn addition to the &lt;i>notes&lt;/i> table, Postgres created a subtable &lt;i>not\\_id\\_seq&lt;/i> that keeps track of what value is assigned to the &lt;i>id&lt;/i> column when the next note is created. \n\nWith the _\\d notes_ command we can see how the &lt;i>notes&lt;/i> table is defined:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>sql\n<span class=\"token parameter\">username</span><span class=\"token operator\">=></span> \\d notes<span class=\"token punctuation\">;</span>\n                                     Table <span class=\"token string\">\"public.notes\"</span>\n  Column <span class=\"token operator\">|</span> Type <span class=\"token operator\">|</span> Collation <span class=\"token operator\">|</span> Nullable <span class=\"token operator\">|</span> Default\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n id <span class=\"token operator\">|</span> integer <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token function\">nextval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notes_id_seq'</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span>regclass<span class=\"token punctuation\">)</span>\n content <span class=\"token operator\">|</span> text <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span>\n important <span class=\"token operator\">|</span> boolean <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>\n date <span class=\"token operator\">|</span> time without time zone <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>\nIndexes<span class=\"token operator\">:</span>\n    <span class=\"token string\">\"notes_pkey\"</span> <span class=\"token constant\">PRIMARY</span> <span class=\"token constant\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token function\">btree</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe column &lt;i>id&lt;/i> thus has a default value, which is obtained by calling the postgres internal function &lt;i>nextval&lt;/i>. \n\nAdd some content to the table:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>sql\ninsert into <span class=\"token function\">notes</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Relational databases rule the world'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninsert into <span class=\"token function\">notes</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'MongoDB is webscale'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  \nAnd let's see what the generated content looks like:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>sql\n<span class=\"token parameter\">username</span><span class=\"token operator\">=></span> select <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> notes<span class=\"token punctuation\">;</span>\n id <span class=\"token operator\">|</span> content <span class=\"token operator\">|</span> important <span class=\"token operator\">|</span> date\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> relational databases rule the world <span class=\"token operator\">|</span> t <span class=\"token operator\">|</span>\n  <span class=\"token number\">2</span> <span class=\"token operator\">|</span> MongoDB is webscale <span class=\"token operator\">|</span> f <span class=\"token operator\">|</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> rows<span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nIf we try to store data in the database that does not conform to the schema, it will fail. The value of the mandatory column cannot be missing.\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>sql\n<span class=\"token parameter\">username</span><span class=\"token operator\">=></span> insert into <span class=\"token function\">notes</span> <span class=\"token punctuation\">(</span>important<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">ERROR</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> value <span class=\"token keyword\">in</span> column <span class=\"token string\">\"content\"</span> <span class=\"token keyword\">of</span> relation <span class=\"token string\">\"notes\"</span> violates not<span class=\"token operator\">-</span><span class=\"token keyword\">null</span> constraint\n<span class=\"token constant\">DETAIL</span><span class=\"token operator\">:</span> Failing row <span class=\"token function\">contains</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe column value cannot be of the wrong type:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>sql\n<span class=\"token parameter\">username</span><span class=\"token operator\">=></span> insert into <span class=\"token function\">notes</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'only valid data can be saved'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">ERROR</span><span class=\"token operator\">:</span> column <span class=\"token string\">\"important\"</span> is <span class=\"token keyword\">of</span> type boolean but expression is <span class=\"token keyword\">of</span> type integer\n<span class=\"token constant\">LINE</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token operator\">...</span>tent<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'only valid data can be saved'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">^</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nNon-existent columns are not accepted in the schema:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>sql\n<span class=\"token parameter\">username</span><span class=\"token operator\">=></span> insert into <span class=\"token function\">notes</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'only valid data can be saved'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">ERROR</span><span class=\"token operator\">:</span> column <span class=\"token string\">\"value\"</span> <span class=\"token keyword\">of</span> relation <span class=\"token string\">\"notes\"</span> does not exist\n<span class=\"token constant\">LINE</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> insert into <span class=\"token function\">notes</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span> <span class=\"token punctuation\">(</span>'only <span class=\"token operator\">...</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nNow it's time to move on to accessing the database from within the application.\n\n### A node application using a relational database\n\nStart the application as usual with &lt;i>npm init&lt;/i> and install &lt;i>npm init&lt;/i> as the development-time dependency &lt;i>nodemon&lt;/i> and the following runtime dependencies:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>bash\nnpm install express dotenv pg sequelize\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe latter [sequelize](https://sequelize.org/master/) is the library through which we use Postgres. Sequelize is a so-called [Object relational mapping](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping) (ORM) library that allows you to store JavaScript objects in a relational database without using SQL, similar to the Mongoose we use for MongoDB.\n\nLet's test that the connection is successful. Create the file &lt;i>index.js&lt;/i> and the following content:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  dialectOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ssl<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      require<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      rejectUnauthorized<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connection has been established successfully.'</span><span class=\"token punctuation\">)</span>\n    sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unable to connect to the database:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe database &lt;i>connect string&lt;/i> revealed by _heroku config_ should be stored in a file &lt;i>.env&lt;/i>, whose contents should be something like the following\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>bash\n$ cat <span class=\"token punctuation\">.</span>env\n<span class=\"token constant\">DATABASE_URL</span><span class=\"token operator\">=</span>postgres<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>password<span class=\"token operator\">></span>@ec2<span class=\"token operator\">-</span><span class=\"token number\">54</span><span class=\"token operator\">-</span><span class=\"token number\">83</span><span class=\"token operator\">-</span><span class=\"token number\">137</span><span class=\"token operator\">-</span><span class=\"token number\">206.</span>compute<span class=\"token operator\">-</span><span class=\"token number\">1.</span>amazonaws<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span><span class=\"token number\">5432</span><span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>databasename<span class=\"token operator\">></span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nLet's see if a connection is established:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>bash\n$ node index<span class=\"token punctuation\">.</span>js\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token constant\">AS</span> result\nConnection has been established successfully<span class=\"token punctuation\">.</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\nIf and when the connection works, we can run the first query. Let's modify the program as follows:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize<span class=\"token punctuation\">,</span> QueryTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  dialectOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ssl<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      require<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      rejectUnauthorized<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM notes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> QueryTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SELECT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unable to connect to the database:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe application execution should print as follows:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token constant\">FROM</span> notes\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Relational databases rule the world'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'MongoDB is webscale'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nAlthough Sequelize is an ORM library, and there is little need to write SQL yourself using it, we now used [direct SQL](https://sequelize.org/master/manual/raw-queries.html) with the sequelize method [query](https://sequelize.org/master/class/lib/sequelize.js~Sequelize.html#instance-method-query).\n\nSince everything seems to work, let's convert the application into a web application.\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize<span class=\"token punctuation\">,</span> QueryTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  dialectOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ssl<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      require<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      rejectUnauthorized<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM notes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> QueryTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SELECT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span></span><span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe app seems to work. However, let's now switch to using Sequelize instead of SQL as it is intended to be used.\n\n### Model\n\nWhen using Sequelize, each table in the database is represented by a [model](https://sequelize.org/master/manual/model-basics.html), which is effectively its own JavaScript class. Let's now define the model &lt;i>Note&lt;/i> corresponding to the table &lt;i>notes&lt;/i> for the application by changing the code to the following format:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize<span class=\"token punctuation\">,</span> Model<span class=\"token punctuation\">,</span> DataTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span></span><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  dialectOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ssl<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      require<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      rejectUnauthorized<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Note</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    primaryKey<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    autoIncrement<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  important<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">BOOLEAN</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  sequelize<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  underscored<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  timestamps<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  modelName<span class=\"token operator\">:</span> <span class=\"token string\">'note'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nA few comments on the code. There is nothing very surprising about the &lt;i>Note&lt;/i> definition of the model, each column has a type defined, plus other properties if needed, such as whether it is the main key of the table. The second parameter in the model definition contains the &lt;i>sequelize&lt;/i> attribute and other configuration information. We noted that the table does not have frequently used timestamp columns (created\\_at and updated\\_at).\n\nWe also specified that table names are inferred from model names using the \"underscored\" technique. In practice, this means that if a model name is &lt;i>Note&lt;/i>, as in our case, the name of the corresponding table is inferred from the lowercase plural of &lt;i>notes&lt;/i>. If, on the other hand, the name of the model were \"two-part\", e.g. &lt;i>StudyGroup&lt;/i>, the name of the table would be &lt;i>study_groups&lt;/i>. Instead of automatically inferring table names, Sequelize also allows explicitly defining table names. \n\nThe same naming convention applies to columns. If we had specified that a note is associated with &lt;i>creationYear&lt;/i>, i.e. information about the year it was created, we would define it in the model as follows:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  creationYear<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe name of the corresponding column in the database would be &lt;i>creation_year&lt;/i>. In the code, the reference to the column is always in the same format as in the model, i.e. in \"camel case\" format. \n\nWe have also specified &lt;i>modelName: 'note'&lt;/i>, the default \"model name\" would be capitalized &lt;i>Note&lt;/i>, however we want a lower case initial, it will make a few things a bit more convenient in the future.\n\nThe database operation is easily done using the [query interface](https://sequelize.org/master/manual/model-querying-basics.html) provided by models, the method [findAll](https://sequelize.org/master/class/lib/model.js~Model.html#static-method-findAll) works exactly as you would expect it to from its name:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe console tells you that the method call &lt;i>Note.findAll()&lt;/i> will cause the following query:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span> <span class=\"token constant\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token constant\">AS</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nNext, let's implement an endpoint for creating new notes:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe new note is thus created by calling the model's &lt;i>Note&lt;/i> method [create](https://sequelize.org/master/manual/model-querying-basics.html#simple-insert-queries) and passing as a parameter the entity that defines the values of the columns.\n\nInstead of the &lt;i>create&lt;/i> method, saving to the database [could be done](https://sequelize.org/master/manual/model-instances.html#creating-an-instance) by first using the [build](https://sequelize.org/master/class/lib/model.js~Model.html#static-method-build) method to create a Model-olio from the desired data, and calling the [save](https://sequelize.org/master/class/lib/model.js~Model.html#instance-method-save) method on it:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nCalling the &lt;i>build&lt;/i> method does not yet save the object to the database, so it is still possible to edit the object before the actual save event:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span><span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nFor the use case of the example code, the [create](https://sequelize.org/master/manual/model-querying-basics.html#simple-insert-queries) method is more appropriate, so we'll refrain from using it.\n\nIf the entity being created is not valid, an error message will result. For example, when trying to create a note without content\nthe operation will fail, and the console will reveal the reason as </span><span class=\"token template-punctuation string\">`</span></span>SequelizeValidationError<span class=\"token operator\">:</span> notNull Violation Note<span class=\"token punctuation\">.</span>content cannot be <span class=\"token keyword\">null</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span><span class=\"token number\">39109</span><span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning<span class=\"token operator\">:</span> SequelizeValidationError<span class=\"token operator\">:</span> notNull Violation<span class=\"token operator\">:</span> Note<span class=\"token punctuation\">.</span>content cannot be <span class=\"token keyword\">null</span>\n    at InstanceValidator<span class=\"token punctuation\">.</span><span class=\"token function\">_validate</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>mluukkai<span class=\"token operator\">/</span>opetus<span class=\"token operator\">/</span>fs<span class=\"token operator\">-</span>psql<span class=\"token operator\">/</span>node_modules<span class=\"token operator\">/</span>sequelize<span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>instance<span class=\"token operator\">-</span>validator<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">78</span><span class=\"token operator\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">processTicksAndRejections</span> <span class=\"token punctuation\">(</span>internal<span class=\"token operator\">/</span>process<span class=\"token operator\">/</span>task_queues<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">93</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nAdd a simple error handling to the addition of the new note:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\n&lt;div class=\"tasks\">\n\n### Tasks 13.1.-13.3.\n\nIn the tasks of this section, we will build a blog application backend similar to the tasks in [section 4](/section 4), which should be compatible with the frontend in [section 5](/section 5), except for error handling. We will also add a set of features to the backend that the frontend in part 5 cannot exploit.\n\n#### Task 13.1.\n\nCreate a GitHub repository for the application and create a Heroku application and a Postgres database for the application within it. Make sure to establish a connection to the application database.\n\n#### Task 13.2.\n\nOn the command line, create a &lt;i>blogs&lt;/i> table for the application with the following columns\n- id (unique, incrementing id)\n- author (string)\n- url (a string that cannot be empty)\n- title (non-empty string)\n- likes (integer with default value zero)\n\nAdd at least two blogs to the database\n\n#### Exercise 13.3.\n\nCreate a command-line functionality in your application that prints the blogs in the database, e.g. as follows:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>bash\n$ node cli<span class=\"token punctuation\">.</span>js\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token constant\">FROM</span> blogs\nDan Abramov<span class=\"token operator\">:</span> <span class=\"token string\">'On let vs const'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> likes\nLaurenz Albe<span class=\"token operator\">:</span> <span class=\"token string\">'Gaps in sequences in PostgreSQL'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> likes\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\n&lt;/div>\n\n&lt;div class=\"content\">\n\n### Automatic creation of database tables\n\nOur application now has one annoying aspect, it assumes that a database with exactly the right schema exists, i.e. that the table </span><span class=\"token template-punctuation string\">`</span></span>notes<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> has been created with the appropriate </span><span class=\"token template-punctuation string\">`</span></span>create table<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> command.\n\nSince the program code is stored on Github, it would make sense to also store the commands that create the database in the program code, so that the schema of the database is definitely what the program code expects. Sequelize can actually generate the schema automatically from the model definition using the models method [sync](https://sequelize.org/master/manual/model-basics.html#model-synchronization). \n\nLet's now destroy the database from the console by issuing the following command:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\ndrop table notes<span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe </span><span class=\"token template-punctuation string\">`</span></span>\\d<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> command reveals that the table has been lost from the database:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token parameter\">username</span><span class=\"token operator\">=></span> \\d\nDid not find any relations<span class=\"token punctuation\">.</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe application no longer works. \n\nAdd the following command to the application immediately after the model </span><span class=\"token template-punctuation string\">`</span></span>Note<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> is defined:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nWhen the application starts, the following is printed to the console:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">CREATE</span> <span class=\"token constant\">TABLE</span> <span class=\"token constant\">IF</span> <span class=\"token constant\">NOT</span> <span class=\"token constant\">EXISTS</span> <span class=\"token string\">\"notes\"</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span> <span class=\"token constant\">SERIAL</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"content\"</span> <span class=\"token constant\">TEXT</span> <span class=\"token constant\">NOT</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"important\"</span> <span class=\"token constant\">BOOLEAN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span> <span class=\"token constant\">TIMESTAMP</span> <span class=\"token constant\">WITH</span> <span class=\"token constant\">TIME</span> <span class=\"token constant\">ZONE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PRIMARY</span> <span class=\"token constant\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThat is, when the application starts, the command </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token constant\">CREATE</span> <span class=\"token constant\">TABLE</span> <span class=\"token constant\">IF</span> <span class=\"token constant\">NOT</span> <span class=\"token constant\">EXISTS</span> <span class=\"token string\">\"notes\"</span><span class=\"token operator\">...</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> is executed which creates the table </span><span class=\"token template-punctuation string\">`</span></span>notes<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> if it does not already exist.\n\n### Other operations\n\nLet's complete the application with a few more operations. \n\nThe search for a single note is possible with the method [findByPk](https://sequelize.org/master/manual/model-querying-finders.html) because it is searched by the id of the primary key:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nRetrieving a single note will cause the following SQL command:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span> <span class=\"token constant\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token constant\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token constant\">WHERE</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nIf no note is found, returns </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">null</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">, in which case the relevant status code is given.\n\nThe modification of a note is done as follows. Only the modification of the </span><span class=\"token template-punctuation string\">`</span></span>important<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> field is supported, since the application frontend does not need anything else:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\napp<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>important\n    <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThe object corresponding to the database row is retrieved from the repository using the </span><span class=\"token template-punctuation string\">`</span></span>findByPk<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> method, the object is modified and the result is saved by calling the </span><span class=\"token template-punctuation string\">`</span></span>save<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> method of the object corresponding to the database row.\n\nThe current code for the application is available in full at [github](https://github.com/fullstack-hy/part122-notes/tree/part12-1), branch &lt;i>part12-1&lt;/i>.\n\n### Printing objects returned by Sequelize to the console\n\nThe JavaScript programmer's most important tool is &lt;i>console.log&lt;/i>, the aggressive use of which will get even the worst bugs under control. Add console printing to the single note path:\n\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nWe see that the end result is not quite what we expected:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\nnote <span class=\"token punctuation\">{</span>\n  dataValues<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Notes are attached to a user'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">03</span>T15<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">24.582</span>Z<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  _previousDataValues<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Notes are attached to a user'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">03</span>T15<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">24.582</span>Z<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  _changed<span class=\"token operator\">:</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  _options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    isNewRecord<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    _schema<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    _schemaDelimiter<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'important'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'date'</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  isNewRecord<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nIn addition to the information in the note, all sorts of other things are printed on the console. We can get the desired result by calling the model-olio method [toJSON](https://sequelize.org/master/class/lib/model.js~Model.html#instance-method-toJSON):\n\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nNow the end result is exactly what we want.\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n<span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  content<span class=\"token operator\">:</span> <span class=\"token string\">'Notes are attached to a user'</span><span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">03</span>T15<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">24.582</span>Z<span class=\"token punctuation\">,</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nIn the case of a collection of entities, the method toJson does not work directly, the method must be called separately for each entity in the collection: \n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token operator\">=></span>n<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nHowever, perhaps a better solution is to convert the collection to JSON for printing: \n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nThis way is better especially if the entities in the collection contain other entities. It is also often useful to format the entities on the screen in a slightly more reader-friendly format. This can be done with the command:\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>json\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"tasks\"</span><span class=\"token operator\">></span>\n\n### Task <span class=\"token number\">13.4</span><span class=\"token punctuation\">.</span>\n\n#### Task <span class=\"token number\">13.4</span><span class=\"token punctuation\">.</span>\n\nTransform your application into a web application that performs the following operations\n\n<span class=\"token operator\">-</span> <span class=\"token constant\">GET</span> api<span class=\"token operator\">/</span><span class=\"token function\">blogs</span> <span class=\"token punctuation\">(</span>list all blogs<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span> <span class=\"token constant\">POST</span> api<span class=\"token operator\">/</span><span class=\"token function\">blogs</span> <span class=\"token punctuation\">(</span>add a <span class=\"token keyword\">new</span> <span class=\"token class-name\">blog</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span> <span class=\"token constant\">DELETE</span> api<span class=\"token operator\">/</span>blogs<span class=\"token operator\">/</span><span class=\"token operator\">:</span><span class=\"token function\">id</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">delete</span> a blog<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>","frontmatter":{"mainImage":{"publicURL":"/static/a912ccd5077570e9e5104b4d7b908c3c/part-13.svg"},"part":13,"letter":"a","lang":"en"}}},"pageContext":{"part":13,"letter":"a","lang":"en"}}}